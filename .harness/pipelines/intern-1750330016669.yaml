pipeline:
  identifier: Build_adithya10_12ramesh_intern_1750330022384
  name: Build intern
  orgIdentifier: default
  projectIdentifier: intern
  properties:
    ci:
      codebase:
        build: <+input>
        connectorRef: account.Github_OAuth_1750330006102
        repoName: adithya10-12ramesh/intern
  stages:
    - stage:
        identifier: build
        name: build
        spec:
          caching:
            enabled: true
          cloneCodebase: true
          execution:
            steps:
              - step:
                  identifier: install_system_deps
                  name: install system dependencies
                  spec:
                    command: |-
                      # Update package list and install build dependencies
                      apt-get update
                      apt-get install -y pkg-config libdbus-1-dev python3-dev build-essential
                  timeout: ""
                  type: Run
              - step:
                  identifier: setupvirtualenvironment
                  name: setup virtual environment
                  spec:
                    command: |-
                      python3 -m venv .venv
                      . .venv/bin/activate
                      python3 -m pip install --upgrade pip

                      # Filter out system packages and install Python packages safely
                      if [ -f requirements.txt ]; then
                        echo "Original requirements.txt:"
                        cat requirements.txt
                        
                        # List of known system packages that shouldn't be installed via pip
                        SYSTEM_PACKAGES="cloud-init|command-not-found|ubuntu-advantage-tools|update-manager-core|unattended-upgrades"
                        
                        # Remove system packages
                        grep -v -E "($SYSTEM_PACKAGES)" requirements.txt > requirements_python_only.txt
                        
                        echo "Filtered requirements (Python packages only):"
                        cat requirements_python_only.txt
                        
                        # Install Python packages with error handling
                        if [ -s requirements_python_only.txt ]; then
                          python3 -m pip install -r requirements_python_only.txt || {
                            echo "Batch install failed, trying individual packages..."
                            while IFS= read -r line; do
                              if [[ ! "$line" =~ ^# ]] && [[ -n "$line" ]] && [[ "$line" != *"$SYSTEM_PACKAGES"* ]]; then
                                echo "Installing: $line"
                                python3 -m pip install "$line" || echo "Failed to install: $line"
                              fi
                            done < requirements_python_only.txt
                          }
                        else
                          echo "No Python packages to install"
                        fi
                      else
                        echo "No requirements.txt found"
                      fi

                      python3 -m pip install -e .
                  timeout: ""
                  type: Run
              - step:
                  identifier: runlinter
                  name: run linter
                  spec:
                    command: |-
                      . .venv/bin/activate
                      python3 -m pip install flake8
                      flake8 .
                  timeout: ""
                  type: Run
          platform:
            arch: Amd64
            os: Linux
          runtime:
            spec: {}
            type: Docker
        type: CI
