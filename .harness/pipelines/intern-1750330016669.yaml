pipeline:
  identifier: Build_adithya10_12ramesh_intern_1750330022384
  name: Build intern
  orgIdentifier: default
  projectIdentifier: intern
  properties:
    ci:
      codebase:
        build: <+input>
        connectorRef: account.Github_OAuth_1750330006102
        repoName: adithya10-12ramesh/intern
  stages:
    - stage:
        identifier: build
        name: build
        spec:
          caching:
            enabled: true
          cloneCodebase: true
          execution:
            steps:
              - step:
                  identifier: install_system_deps
                  name: install system dependencies
                  spec:
                    command: |-
                      # Robust apt lock handling
                      echo "Handling apt locks and installing system dependencies..."

                      # Function to wait for apt locks
                      wait_for_apt() {
                        local max_attempts=30
                        local attempt=0
                        
                        while [ $attempt -lt $max_attempts ]; do
                          if ! fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 && \
                             ! fuser /var/lib/apt/lists/lock >/dev/null 2>&1; then
                            echo "Apt locks are free"
                            return 0
                          fi
                          
                          echo "Waiting for apt locks... (attempt $((attempt + 1))/$max_attempts)"
                          sleep 10
                          attempt=$((attempt + 1))
                        done
                        
                        echo "Timeout waiting for apt locks, attempting to resolve..."
                        return 1
                      }

                      # Wait for locks or handle them
                      if ! wait_for_apt; then
                        echo "Forcefully handling apt locks..."
                        
                        # Kill any apt processes
                        pkill -f "apt-get|apt|dpkg|unattended-upgrade" || true
                        sleep 5
                        
                        # Remove lock files
                        rm -f /var/lib/apt/lists/lock
                        rm -f /var/cache/apt/archives/lock
                        rm -f /var/lib/dpkg/lock*
                        
                        # Fix any broken installs
                        dpkg --configure -a || true
                      fi

                      # Set non-interactive mode
                      export DEBIAN_FRONTEND=noninteractive
                      export APT_LISTCHANGES_FRONTEND=none

                      # Update and install with retries
                      for i in {1..3}; do
                        echo "Attempt $i: Updating package lists..."
                        if apt-get update; then
                          echo "Package lists updated successfully"
                          break
                        else
                          echo "Failed to update package lists, retrying in 10 seconds..."
                          sleep 10
                        fi
                      done

                      # Install dependencies
                      apt-get install -y --no-install-recommends \
                        pkg-config \
                        libdbus-1-dev \
                        python3-dev \
                        build-essential \
                        python3-full
                  timeout: 10m
                  type: Run
              - step:
                  identifier: setupvirtualenvironment
                  name: setup virtual environment
                  spec:
                    command: |-
                      python3 -m venv .venv
                      . .venv/bin/activate
                      python3 -m pip install --upgrade pip

                      # Filter out system packages and install Python packages safely
                      if [ -f requirements.txt ]; then
                        echo "Original requirements.txt:"
                        cat requirements.txt
                        
                        # List of known system packages that shouldn't be installed via pip
                        SYSTEM_PACKAGES="cloud-init|command-not-found|ubuntu-advantage-tools|update-manager-core|unattended-upgrades"
                        
                        # Remove system packages
                        grep -v -E "($SYSTEM_PACKAGES)" requirements.txt > requirements_python_only.txt
                        
                        echo "Filtered requirements (Python packages only):"
                        cat requirements_python_only.txt
                        
                        # Install Python packages with error handling
                        if [ -s requirements_python_only.txt ]; then
                          python3 -m pip install -r requirements_python_only.txt || {
                            echo "Batch install failed, trying individual packages..."
                            while IFS= read -r line; do
                              if [[ ! "$line" =~ ^# ]] && [[ -n "$line" ]] && [[ "$line" != *"$SYSTEM_PACKAGES"* ]]; then
                                echo "Installing: $line"
                                python3 -m pip install "$line" || echo "Failed to install: $line"
                              fi
                            done < requirements_python_only.txt
                          }
                        else
                          echo "No Python packages to install"
                        fi
                      else
                        echo "No requirements.txt found"
                      fi

                      # Install any local dependencies if package structure exists
                      if [ -f "setup.py" ] || [ -f "pyproject.toml" ]; then
                        echo "Found Python package configuration, installing in editable mode..."
                        python3 -m pip install -e .
                      elif [ -f "requirements-dev.txt" ]; then
                        echo "Installing development dependencies..."
                        python3 -m pip install -r requirements-dev.txt
                      else
                        echo "No package configuration found - dependencies already installed from requirements.txt"
                      fi
                  timeout: ""
                  type: Run
              - step:
                  identifier: runlinter
                  name: run linter
                  spec:
                    command: |-
                      . .venv/bin/activate
                      python3 -m pip install flake8
                      flake8 .
                  timeout: ""
                  type: Run
          platform:
            arch: Amd64
            os: Linux
          runtime:
            spec: {}
            type: Docker
        type: CI
