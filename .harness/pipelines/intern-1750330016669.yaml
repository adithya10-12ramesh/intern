pipeline:
  identifier: Build_adithya10_12ramesh_intern_1750330022384
  name: Build intern
  orgIdentifier: default
  projectIdentifier: intern
  properties:
    ci:
      codebase:
        build: <+input>
        connectorRef: account.Github_OAuth_1750330006102
        repoName: adithya10-12ramesh/intern
  stages:
    - stage:
        identifier: build
        name: build
        spec:
          caching:
            enabled: true
          cloneCodebase: true
          execution:
            steps:
              - step:
                  identifier: setupvirtualenvironment
                  name: setup virtual environment
                  spec:
                    command: |-
                      python3 -m venv .venv
                      . .venv/bin/activate
                      python3 -m pip install --upgrade pip

                      # Handle problematic dependencies with multiple fallback strategies
                      if [ -f requirements.txt ]; then
                        echo "Original requirements.txt:"
                        cat requirements.txt
                        
                        # Strategy 1: Try with flexible cloud-init version
                        sed 's/cloud-init==24.4/cloud-init/' requirements.txt > requirements_flexible.txt
                        python3 -m pip install -r requirements_flexible.txt && success=1 || success=0
                        
                        # Strategy 2: If that fails, remove cloud-init entirely
                        if [ $success -eq 0 ]; then
                          echo "Flexible version failed, removing cloud-init..."
                          grep -v "cloud-init" requirements.txt > requirements_no_cloud_init.txt
                          python3 -m pip install -r requirements_no_cloud_init.txt && success=1 || success=0
                        fi
                        
                        # Strategy 3: Install packages one by one, skipping problematic ones
                        if [ $success -eq 0 ]; then
                          echo "Batch install failed, trying individual packages..."
                          while IFS= read -r line; do
                            if [[ ! "$line" =~ ^# ]] && [[ -n "$line" ]]; then
                              python3 -m pip install "$line" || echo "Skipped: $line"
                            fi
                          done < requirements.txt
                        fi
                      else
                        echo "No requirements.txt found"
                      fi

                      python3 -m pip install -e .
                  timeout: ""
                  type: Run
              - step:
                  identifier: runlinter
                  name: run linter
                  spec:
                    command: |-
                      . .venv/bin/activate
                      python3 -m pip install flake8
                      flake8 .
                  timeout: ""
                  type: Run
          platform:
            arch: Amd64
            os: Linux
          runtime:
            spec: {}
            type: Docker
        type: CI
